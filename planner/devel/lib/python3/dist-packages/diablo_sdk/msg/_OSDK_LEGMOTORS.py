# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from diablo_sdk/OSDK_LEGMOTORS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OSDK_LEGMOTORS(genpy.Message):
  _md5sum = "d964a0d5c0310c226095caad70b0341b"
  _type = "diablo_sdk/OSDK_LEGMOTORS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32   left_hip_enc_rev
float64  left_hip_pos
float64  left_hip_vel
float64  left_hip_iq

int32   left_knee_enc_rev
float64  left_knee_pos
float64  left_knee_vel
float64  left_knee_iq

int32   left_wheel_enc_rev
float64  left_wheel_pos
float64  left_wheel_vel
float64  left_wheel_iq

int32   right_hip_enc_rev
float64  right_hip_pos
float64  right_hip_vel
float64  right_hip_iq

int32   right_knee_enc_rev
float64  right_knee_pos
float64  right_knee_vel
float64  right_knee_iq

int32   right_wheel_enc_rev
float64  right_wheel_pos
float64  right_wheel_vel
float64  right_wheel_iq"""
  __slots__ = ['left_hip_enc_rev','left_hip_pos','left_hip_vel','left_hip_iq','left_knee_enc_rev','left_knee_pos','left_knee_vel','left_knee_iq','left_wheel_enc_rev','left_wheel_pos','left_wheel_vel','left_wheel_iq','right_hip_enc_rev','right_hip_pos','right_hip_vel','right_hip_iq','right_knee_enc_rev','right_knee_pos','right_knee_vel','right_knee_iq','right_wheel_enc_rev','right_wheel_pos','right_wheel_vel','right_wheel_iq']
  _slot_types = ['int32','float64','float64','float64','int32','float64','float64','float64','int32','float64','float64','float64','int32','float64','float64','float64','int32','float64','float64','float64','int32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_hip_enc_rev,left_hip_pos,left_hip_vel,left_hip_iq,left_knee_enc_rev,left_knee_pos,left_knee_vel,left_knee_iq,left_wheel_enc_rev,left_wheel_pos,left_wheel_vel,left_wheel_iq,right_hip_enc_rev,right_hip_pos,right_hip_vel,right_hip_iq,right_knee_enc_rev,right_knee_pos,right_knee_vel,right_knee_iq,right_wheel_enc_rev,right_wheel_pos,right_wheel_vel,right_wheel_iq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OSDK_LEGMOTORS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_hip_enc_rev is None:
        self.left_hip_enc_rev = 0
      if self.left_hip_pos is None:
        self.left_hip_pos = 0.
      if self.left_hip_vel is None:
        self.left_hip_vel = 0.
      if self.left_hip_iq is None:
        self.left_hip_iq = 0.
      if self.left_knee_enc_rev is None:
        self.left_knee_enc_rev = 0
      if self.left_knee_pos is None:
        self.left_knee_pos = 0.
      if self.left_knee_vel is None:
        self.left_knee_vel = 0.
      if self.left_knee_iq is None:
        self.left_knee_iq = 0.
      if self.left_wheel_enc_rev is None:
        self.left_wheel_enc_rev = 0
      if self.left_wheel_pos is None:
        self.left_wheel_pos = 0.
      if self.left_wheel_vel is None:
        self.left_wheel_vel = 0.
      if self.left_wheel_iq is None:
        self.left_wheel_iq = 0.
      if self.right_hip_enc_rev is None:
        self.right_hip_enc_rev = 0
      if self.right_hip_pos is None:
        self.right_hip_pos = 0.
      if self.right_hip_vel is None:
        self.right_hip_vel = 0.
      if self.right_hip_iq is None:
        self.right_hip_iq = 0.
      if self.right_knee_enc_rev is None:
        self.right_knee_enc_rev = 0
      if self.right_knee_pos is None:
        self.right_knee_pos = 0.
      if self.right_knee_vel is None:
        self.right_knee_vel = 0.
      if self.right_knee_iq is None:
        self.right_knee_iq = 0.
      if self.right_wheel_enc_rev is None:
        self.right_wheel_enc_rev = 0
      if self.right_wheel_pos is None:
        self.right_wheel_pos = 0.
      if self.right_wheel_vel is None:
        self.right_wheel_vel = 0.
      if self.right_wheel_iq is None:
        self.right_wheel_iq = 0.
    else:
      self.left_hip_enc_rev = 0
      self.left_hip_pos = 0.
      self.left_hip_vel = 0.
      self.left_hip_iq = 0.
      self.left_knee_enc_rev = 0
      self.left_knee_pos = 0.
      self.left_knee_vel = 0.
      self.left_knee_iq = 0.
      self.left_wheel_enc_rev = 0
      self.left_wheel_pos = 0.
      self.left_wheel_vel = 0.
      self.left_wheel_iq = 0.
      self.right_hip_enc_rev = 0
      self.right_hip_pos = 0.
      self.right_hip_vel = 0.
      self.right_hip_iq = 0.
      self.right_knee_enc_rev = 0
      self.right_knee_pos = 0.
      self.right_knee_vel = 0.
      self.right_knee_iq = 0.
      self.right_wheel_enc_rev = 0
      self.right_wheel_pos = 0.
      self.right_wheel_vel = 0.
      self.right_wheel_iq = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3di3di3di3di3di3d().pack(_x.left_hip_enc_rev, _x.left_hip_pos, _x.left_hip_vel, _x.left_hip_iq, _x.left_knee_enc_rev, _x.left_knee_pos, _x.left_knee_vel, _x.left_knee_iq, _x.left_wheel_enc_rev, _x.left_wheel_pos, _x.left_wheel_vel, _x.left_wheel_iq, _x.right_hip_enc_rev, _x.right_hip_pos, _x.right_hip_vel, _x.right_hip_iq, _x.right_knee_enc_rev, _x.right_knee_pos, _x.right_knee_vel, _x.right_knee_iq, _x.right_wheel_enc_rev, _x.right_wheel_pos, _x.right_wheel_vel, _x.right_wheel_iq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.left_hip_enc_rev, _x.left_hip_pos, _x.left_hip_vel, _x.left_hip_iq, _x.left_knee_enc_rev, _x.left_knee_pos, _x.left_knee_vel, _x.left_knee_iq, _x.left_wheel_enc_rev, _x.left_wheel_pos, _x.left_wheel_vel, _x.left_wheel_iq, _x.right_hip_enc_rev, _x.right_hip_pos, _x.right_hip_vel, _x.right_hip_iq, _x.right_knee_enc_rev, _x.right_knee_pos, _x.right_knee_vel, _x.right_knee_iq, _x.right_wheel_enc_rev, _x.right_wheel_pos, _x.right_wheel_vel, _x.right_wheel_iq,) = _get_struct_i3di3di3di3di3di3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3di3di3di3di3di3d().pack(_x.left_hip_enc_rev, _x.left_hip_pos, _x.left_hip_vel, _x.left_hip_iq, _x.left_knee_enc_rev, _x.left_knee_pos, _x.left_knee_vel, _x.left_knee_iq, _x.left_wheel_enc_rev, _x.left_wheel_pos, _x.left_wheel_vel, _x.left_wheel_iq, _x.right_hip_enc_rev, _x.right_hip_pos, _x.right_hip_vel, _x.right_hip_iq, _x.right_knee_enc_rev, _x.right_knee_pos, _x.right_knee_vel, _x.right_knee_iq, _x.right_wheel_enc_rev, _x.right_wheel_pos, _x.right_wheel_vel, _x.right_wheel_iq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.left_hip_enc_rev, _x.left_hip_pos, _x.left_hip_vel, _x.left_hip_iq, _x.left_knee_enc_rev, _x.left_knee_pos, _x.left_knee_vel, _x.left_knee_iq, _x.left_wheel_enc_rev, _x.left_wheel_pos, _x.left_wheel_vel, _x.left_wheel_iq, _x.right_hip_enc_rev, _x.right_hip_pos, _x.right_hip_vel, _x.right_hip_iq, _x.right_knee_enc_rev, _x.right_knee_pos, _x.right_knee_vel, _x.right_knee_iq, _x.right_wheel_enc_rev, _x.right_wheel_pos, _x.right_wheel_vel, _x.right_wheel_iq,) = _get_struct_i3di3di3di3di3di3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3di3di3di3di3di3d = None
def _get_struct_i3di3di3di3di3di3d():
    global _struct_i3di3di3di3di3di3d
    if _struct_i3di3di3di3di3di3d is None:
        _struct_i3di3di3di3di3di3d = struct.Struct("<i3di3di3di3di3di3d")
    return _struct_i3di3di3di3di3di3d
