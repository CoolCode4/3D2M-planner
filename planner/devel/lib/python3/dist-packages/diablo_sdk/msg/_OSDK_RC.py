# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from diablo_sdk/OSDK_RC.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OSDK_RC(genpy.Message):
  _md5sum = "fa6f6bd1ffdb17cef5c71611dd188cd0"
  _type = "diablo_sdk/OSDK_RC"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32  ch1
uint32  ch2
uint32  ch3
uint32  ch4
uint32  ch5
uint32  ch6
uint32  ch7
uint32  ch8
uint32  ch9
uint32  ch10
uint32  ch11
uint32  ch12
uint32  ch13
uint32  ch14
uint32  ch15
uint32  ch16
uint32  ch17
uint32  ch18
uint8   frame_lost
uint8   failsafe
uint8   reserve"""
  __slots__ = ['ch1','ch2','ch3','ch4','ch5','ch6','ch7','ch8','ch9','ch10','ch11','ch12','ch13','ch14','ch15','ch16','ch17','ch18','frame_lost','failsafe','reserve']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15,ch16,ch17,ch18,frame_lost,failsafe,reserve

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OSDK_RC, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ch1 is None:
        self.ch1 = 0
      if self.ch2 is None:
        self.ch2 = 0
      if self.ch3 is None:
        self.ch3 = 0
      if self.ch4 is None:
        self.ch4 = 0
      if self.ch5 is None:
        self.ch5 = 0
      if self.ch6 is None:
        self.ch6 = 0
      if self.ch7 is None:
        self.ch7 = 0
      if self.ch8 is None:
        self.ch8 = 0
      if self.ch9 is None:
        self.ch9 = 0
      if self.ch10 is None:
        self.ch10 = 0
      if self.ch11 is None:
        self.ch11 = 0
      if self.ch12 is None:
        self.ch12 = 0
      if self.ch13 is None:
        self.ch13 = 0
      if self.ch14 is None:
        self.ch14 = 0
      if self.ch15 is None:
        self.ch15 = 0
      if self.ch16 is None:
        self.ch16 = 0
      if self.ch17 is None:
        self.ch17 = 0
      if self.ch18 is None:
        self.ch18 = 0
      if self.frame_lost is None:
        self.frame_lost = 0
      if self.failsafe is None:
        self.failsafe = 0
      if self.reserve is None:
        self.reserve = 0
    else:
      self.ch1 = 0
      self.ch2 = 0
      self.ch3 = 0
      self.ch4 = 0
      self.ch5 = 0
      self.ch6 = 0
      self.ch7 = 0
      self.ch8 = 0
      self.ch9 = 0
      self.ch10 = 0
      self.ch11 = 0
      self.ch12 = 0
      self.ch13 = 0
      self.ch14 = 0
      self.ch15 = 0
      self.ch16 = 0
      self.ch17 = 0
      self.ch18 = 0
      self.frame_lost = 0
      self.failsafe = 0
      self.reserve = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18I3B().pack(_x.ch1, _x.ch2, _x.ch3, _x.ch4, _x.ch5, _x.ch6, _x.ch7, _x.ch8, _x.ch9, _x.ch10, _x.ch11, _x.ch12, _x.ch13, _x.ch14, _x.ch15, _x.ch16, _x.ch17, _x.ch18, _x.frame_lost, _x.failsafe, _x.reserve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 75
      (_x.ch1, _x.ch2, _x.ch3, _x.ch4, _x.ch5, _x.ch6, _x.ch7, _x.ch8, _x.ch9, _x.ch10, _x.ch11, _x.ch12, _x.ch13, _x.ch14, _x.ch15, _x.ch16, _x.ch17, _x.ch18, _x.frame_lost, _x.failsafe, _x.reserve,) = _get_struct_18I3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18I3B().pack(_x.ch1, _x.ch2, _x.ch3, _x.ch4, _x.ch5, _x.ch6, _x.ch7, _x.ch8, _x.ch9, _x.ch10, _x.ch11, _x.ch12, _x.ch13, _x.ch14, _x.ch15, _x.ch16, _x.ch17, _x.ch18, _x.frame_lost, _x.failsafe, _x.reserve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 75
      (_x.ch1, _x.ch2, _x.ch3, _x.ch4, _x.ch5, _x.ch6, _x.ch7, _x.ch8, _x.ch9, _x.ch10, _x.ch11, _x.ch12, _x.ch13, _x.ch14, _x.ch15, _x.ch16, _x.ch17, _x.ch18, _x.frame_lost, _x.failsafe, _x.reserve,) = _get_struct_18I3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18I3B = None
def _get_struct_18I3B():
    global _struct_18I3B
    if _struct_18I3B is None:
        _struct_18I3B = struct.Struct("<18I3B")
    return _struct_18I3B
