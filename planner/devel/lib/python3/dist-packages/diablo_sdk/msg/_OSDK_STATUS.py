# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from diablo_sdk/OSDK_STATUS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OSDK_STATUS(genpy.Message):
  _md5sum = "d4c8153a3ac06d903b6a6611296c40f8"
  _type = "diablo_sdk/OSDK_STATUS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8   ctrl_mode
uint8   robot_mode
uint32  error
uint32  warning"""
  __slots__ = ['ctrl_mode','robot_mode','error','warning']
  _slot_types = ['uint8','uint8','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctrl_mode,robot_mode,error,warning

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OSDK_STATUS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ctrl_mode is None:
        self.ctrl_mode = 0
      if self.robot_mode is None:
        self.robot_mode = 0
      if self.error is None:
        self.error = 0
      if self.warning is None:
        self.warning = 0
    else:
      self.ctrl_mode = 0
      self.robot_mode = 0
      self.error = 0
      self.warning = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.ctrl_mode, _x.robot_mode, _x.error, _x.warning))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.ctrl_mode, _x.robot_mode, _x.error, _x.warning,) = _get_struct_2B2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.ctrl_mode, _x.robot_mode, _x.error, _x.warning))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.ctrl_mode, _x.robot_mode, _x.error, _x.warning,) = _get_struct_2B2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2I = None
def _get_struct_2B2I():
    global _struct_2B2I
    if _struct_2B2I is None:
        _struct_2B2I = struct.Struct("<2B2I")
    return _struct_2B2I
