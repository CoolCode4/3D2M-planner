// Generated by gencpp from file diablo_sdk/OSDK_STATUS.msg
// DO NOT EDIT!


#ifndef DIABLO_SDK_MESSAGE_OSDK_STATUS_H
#define DIABLO_SDK_MESSAGE_OSDK_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diablo_sdk
{
template <class ContainerAllocator>
struct OSDK_STATUS_
{
  typedef OSDK_STATUS_<ContainerAllocator> Type;

  OSDK_STATUS_()
    : ctrl_mode(0)
    , robot_mode(0)
    , error(0)
    , warning(0)  {
    }
  OSDK_STATUS_(const ContainerAllocator& _alloc)
    : ctrl_mode(0)
    , robot_mode(0)
    , error(0)
    , warning(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef uint8_t _robot_mode_type;
  _robot_mode_type robot_mode;

   typedef uint32_t _error_type;
  _error_type error;

   typedef uint32_t _warning_type;
  _warning_type warning;





  typedef boost::shared_ptr< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> const> ConstPtr;

}; // struct OSDK_STATUS_

typedef ::diablo_sdk::OSDK_STATUS_<std::allocator<void> > OSDK_STATUS;

typedef boost::shared_ptr< ::diablo_sdk::OSDK_STATUS > OSDK_STATUSPtr;
typedef boost::shared_ptr< ::diablo_sdk::OSDK_STATUS const> OSDK_STATUSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_mode == rhs.ctrl_mode &&
    lhs.robot_mode == rhs.robot_mode &&
    lhs.error == rhs.error &&
    lhs.warning == rhs.warning;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diablo_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4c8153a3ac06d903b6a6611296c40f8";
  }

  static const char* value(const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4c8153a3ac06d90ULL;
  static const uint64_t static_value2 = 0x3b6a6611296c40f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diablo_sdk/OSDK_STATUS";
  }

  static const char* value(const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   ctrl_mode\n"
"uint8   robot_mode\n"
"uint32  error\n"
"uint32  warning\n"
;
  }

  static const char* value(const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_mode);
      stream.next(m.robot_mode);
      stream.next(m.error);
      stream.next(m.warning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OSDK_STATUS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diablo_sdk::OSDK_STATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diablo_sdk::OSDK_STATUS_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_mode);
    s << indent << "robot_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_mode);
    s << indent << "error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error);
    s << indent << "warning: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.warning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIABLO_SDK_MESSAGE_OSDK_STATUS_H
