// Generated by gencpp from file diablo_sdk/OSDK_RC.msg
// DO NOT EDIT!


#ifndef DIABLO_SDK_MESSAGE_OSDK_RC_H
#define DIABLO_SDK_MESSAGE_OSDK_RC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diablo_sdk
{
template <class ContainerAllocator>
struct OSDK_RC_
{
  typedef OSDK_RC_<ContainerAllocator> Type;

  OSDK_RC_()
    : ch1(0)
    , ch2(0)
    , ch3(0)
    , ch4(0)
    , ch5(0)
    , ch6(0)
    , ch7(0)
    , ch8(0)
    , ch9(0)
    , ch10(0)
    , ch11(0)
    , ch12(0)
    , ch13(0)
    , ch14(0)
    , ch15(0)
    , ch16(0)
    , ch17(0)
    , ch18(0)
    , frame_lost(0)
    , failsafe(0)
    , reserve(0)  {
    }
  OSDK_RC_(const ContainerAllocator& _alloc)
    : ch1(0)
    , ch2(0)
    , ch3(0)
    , ch4(0)
    , ch5(0)
    , ch6(0)
    , ch7(0)
    , ch8(0)
    , ch9(0)
    , ch10(0)
    , ch11(0)
    , ch12(0)
    , ch13(0)
    , ch14(0)
    , ch15(0)
    , ch16(0)
    , ch17(0)
    , ch18(0)
    , frame_lost(0)
    , failsafe(0)
    , reserve(0)  {
  (void)_alloc;
    }



   typedef uint32_t _ch1_type;
  _ch1_type ch1;

   typedef uint32_t _ch2_type;
  _ch2_type ch2;

   typedef uint32_t _ch3_type;
  _ch3_type ch3;

   typedef uint32_t _ch4_type;
  _ch4_type ch4;

   typedef uint32_t _ch5_type;
  _ch5_type ch5;

   typedef uint32_t _ch6_type;
  _ch6_type ch6;

   typedef uint32_t _ch7_type;
  _ch7_type ch7;

   typedef uint32_t _ch8_type;
  _ch8_type ch8;

   typedef uint32_t _ch9_type;
  _ch9_type ch9;

   typedef uint32_t _ch10_type;
  _ch10_type ch10;

   typedef uint32_t _ch11_type;
  _ch11_type ch11;

   typedef uint32_t _ch12_type;
  _ch12_type ch12;

   typedef uint32_t _ch13_type;
  _ch13_type ch13;

   typedef uint32_t _ch14_type;
  _ch14_type ch14;

   typedef uint32_t _ch15_type;
  _ch15_type ch15;

   typedef uint32_t _ch16_type;
  _ch16_type ch16;

   typedef uint32_t _ch17_type;
  _ch17_type ch17;

   typedef uint32_t _ch18_type;
  _ch18_type ch18;

   typedef uint8_t _frame_lost_type;
  _frame_lost_type frame_lost;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef uint8_t _reserve_type;
  _reserve_type reserve;





  typedef boost::shared_ptr< ::diablo_sdk::OSDK_RC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diablo_sdk::OSDK_RC_<ContainerAllocator> const> ConstPtr;

}; // struct OSDK_RC_

typedef ::diablo_sdk::OSDK_RC_<std::allocator<void> > OSDK_RC;

typedef boost::shared_ptr< ::diablo_sdk::OSDK_RC > OSDK_RCPtr;
typedef boost::shared_ptr< ::diablo_sdk::OSDK_RC const> OSDK_RCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diablo_sdk::OSDK_RC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diablo_sdk::OSDK_RC_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_RC_<ContainerAllocator2> & rhs)
{
  return lhs.ch1 == rhs.ch1 &&
    lhs.ch2 == rhs.ch2 &&
    lhs.ch3 == rhs.ch3 &&
    lhs.ch4 == rhs.ch4 &&
    lhs.ch5 == rhs.ch5 &&
    lhs.ch6 == rhs.ch6 &&
    lhs.ch7 == rhs.ch7 &&
    lhs.ch8 == rhs.ch8 &&
    lhs.ch9 == rhs.ch9 &&
    lhs.ch10 == rhs.ch10 &&
    lhs.ch11 == rhs.ch11 &&
    lhs.ch12 == rhs.ch12 &&
    lhs.ch13 == rhs.ch13 &&
    lhs.ch14 == rhs.ch14 &&
    lhs.ch15 == rhs.ch15 &&
    lhs.ch16 == rhs.ch16 &&
    lhs.ch17 == rhs.ch17 &&
    lhs.ch18 == rhs.ch18 &&
    lhs.frame_lost == rhs.frame_lost &&
    lhs.failsafe == rhs.failsafe &&
    lhs.reserve == rhs.reserve;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diablo_sdk::OSDK_RC_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_RC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diablo_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_RC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_RC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_RC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa6f6bd1ffdb17cef5c71611dd188cd0";
  }

  static const char* value(const ::diablo_sdk::OSDK_RC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa6f6bd1ffdb17ceULL;
  static const uint64_t static_value2 = 0xf5c71611dd188cd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diablo_sdk/OSDK_RC";
  }

  static const char* value(const ::diablo_sdk::OSDK_RC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32  ch1\n"
"uint32  ch2\n"
"uint32  ch3\n"
"uint32  ch4\n"
"uint32  ch5\n"
"uint32  ch6\n"
"uint32  ch7\n"
"uint32  ch8\n"
"uint32  ch9\n"
"uint32  ch10\n"
"uint32  ch11\n"
"uint32  ch12\n"
"uint32  ch13\n"
"uint32  ch14\n"
"uint32  ch15\n"
"uint32  ch16\n"
"uint32  ch17\n"
"uint32  ch18\n"
"uint8   frame_lost\n"
"uint8   failsafe\n"
"uint8   reserve\n"
;
  }

  static const char* value(const ::diablo_sdk::OSDK_RC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ch1);
      stream.next(m.ch2);
      stream.next(m.ch3);
      stream.next(m.ch4);
      stream.next(m.ch5);
      stream.next(m.ch6);
      stream.next(m.ch7);
      stream.next(m.ch8);
      stream.next(m.ch9);
      stream.next(m.ch10);
      stream.next(m.ch11);
      stream.next(m.ch12);
      stream.next(m.ch13);
      stream.next(m.ch14);
      stream.next(m.ch15);
      stream.next(m.ch16);
      stream.next(m.ch17);
      stream.next(m.ch18);
      stream.next(m.frame_lost);
      stream.next(m.failsafe);
      stream.next(m.reserve);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OSDK_RC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diablo_sdk::OSDK_RC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diablo_sdk::OSDK_RC_<ContainerAllocator>& v)
  {
    s << indent << "ch1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch1);
    s << indent << "ch2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch2);
    s << indent << "ch3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch3);
    s << indent << "ch4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch4);
    s << indent << "ch5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch5);
    s << indent << "ch6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch6);
    s << indent << "ch7: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch7);
    s << indent << "ch8: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch8);
    s << indent << "ch9: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch9);
    s << indent << "ch10: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch10);
    s << indent << "ch11: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch11);
    s << indent << "ch12: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch12);
    s << indent << "ch13: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch13);
    s << indent << "ch14: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch14);
    s << indent << "ch15: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch15);
    s << indent << "ch16: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch16);
    s << indent << "ch17: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch17);
    s << indent << "ch18: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch18);
    s << indent << "frame_lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_lost);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    s << indent << "reserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserve);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIABLO_SDK_MESSAGE_OSDK_RC_H
