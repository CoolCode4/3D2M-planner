// Generated by gencpp from file diablo_sdk/OSDK_LEGMOTORS.msg
// DO NOT EDIT!


#ifndef DIABLO_SDK_MESSAGE_OSDK_LEGMOTORS_H
#define DIABLO_SDK_MESSAGE_OSDK_LEGMOTORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diablo_sdk
{
template <class ContainerAllocator>
struct OSDK_LEGMOTORS_
{
  typedef OSDK_LEGMOTORS_<ContainerAllocator> Type;

  OSDK_LEGMOTORS_()
    : left_hip_enc_rev(0)
    , left_hip_pos(0.0)
    , left_hip_vel(0.0)
    , left_hip_iq(0.0)
    , left_knee_enc_rev(0)
    , left_knee_pos(0.0)
    , left_knee_vel(0.0)
    , left_knee_iq(0.0)
    , left_wheel_enc_rev(0)
    , left_wheel_pos(0.0)
    , left_wheel_vel(0.0)
    , left_wheel_iq(0.0)
    , right_hip_enc_rev(0)
    , right_hip_pos(0.0)
    , right_hip_vel(0.0)
    , right_hip_iq(0.0)
    , right_knee_enc_rev(0)
    , right_knee_pos(0.0)
    , right_knee_vel(0.0)
    , right_knee_iq(0.0)
    , right_wheel_enc_rev(0)
    , right_wheel_pos(0.0)
    , right_wheel_vel(0.0)
    , right_wheel_iq(0.0)  {
    }
  OSDK_LEGMOTORS_(const ContainerAllocator& _alloc)
    : left_hip_enc_rev(0)
    , left_hip_pos(0.0)
    , left_hip_vel(0.0)
    , left_hip_iq(0.0)
    , left_knee_enc_rev(0)
    , left_knee_pos(0.0)
    , left_knee_vel(0.0)
    , left_knee_iq(0.0)
    , left_wheel_enc_rev(0)
    , left_wheel_pos(0.0)
    , left_wheel_vel(0.0)
    , left_wheel_iq(0.0)
    , right_hip_enc_rev(0)
    , right_hip_pos(0.0)
    , right_hip_vel(0.0)
    , right_hip_iq(0.0)
    , right_knee_enc_rev(0)
    , right_knee_pos(0.0)
    , right_knee_vel(0.0)
    , right_knee_iq(0.0)
    , right_wheel_enc_rev(0)
    , right_wheel_pos(0.0)
    , right_wheel_vel(0.0)
    , right_wheel_iq(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _left_hip_enc_rev_type;
  _left_hip_enc_rev_type left_hip_enc_rev;

   typedef double _left_hip_pos_type;
  _left_hip_pos_type left_hip_pos;

   typedef double _left_hip_vel_type;
  _left_hip_vel_type left_hip_vel;

   typedef double _left_hip_iq_type;
  _left_hip_iq_type left_hip_iq;

   typedef int32_t _left_knee_enc_rev_type;
  _left_knee_enc_rev_type left_knee_enc_rev;

   typedef double _left_knee_pos_type;
  _left_knee_pos_type left_knee_pos;

   typedef double _left_knee_vel_type;
  _left_knee_vel_type left_knee_vel;

   typedef double _left_knee_iq_type;
  _left_knee_iq_type left_knee_iq;

   typedef int32_t _left_wheel_enc_rev_type;
  _left_wheel_enc_rev_type left_wheel_enc_rev;

   typedef double _left_wheel_pos_type;
  _left_wheel_pos_type left_wheel_pos;

   typedef double _left_wheel_vel_type;
  _left_wheel_vel_type left_wheel_vel;

   typedef double _left_wheel_iq_type;
  _left_wheel_iq_type left_wheel_iq;

   typedef int32_t _right_hip_enc_rev_type;
  _right_hip_enc_rev_type right_hip_enc_rev;

   typedef double _right_hip_pos_type;
  _right_hip_pos_type right_hip_pos;

   typedef double _right_hip_vel_type;
  _right_hip_vel_type right_hip_vel;

   typedef double _right_hip_iq_type;
  _right_hip_iq_type right_hip_iq;

   typedef int32_t _right_knee_enc_rev_type;
  _right_knee_enc_rev_type right_knee_enc_rev;

   typedef double _right_knee_pos_type;
  _right_knee_pos_type right_knee_pos;

   typedef double _right_knee_vel_type;
  _right_knee_vel_type right_knee_vel;

   typedef double _right_knee_iq_type;
  _right_knee_iq_type right_knee_iq;

   typedef int32_t _right_wheel_enc_rev_type;
  _right_wheel_enc_rev_type right_wheel_enc_rev;

   typedef double _right_wheel_pos_type;
  _right_wheel_pos_type right_wheel_pos;

   typedef double _right_wheel_vel_type;
  _right_wheel_vel_type right_wheel_vel;

   typedef double _right_wheel_iq_type;
  _right_wheel_iq_type right_wheel_iq;





  typedef boost::shared_ptr< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> const> ConstPtr;

}; // struct OSDK_LEGMOTORS_

typedef ::diablo_sdk::OSDK_LEGMOTORS_<std::allocator<void> > OSDK_LEGMOTORS;

typedef boost::shared_ptr< ::diablo_sdk::OSDK_LEGMOTORS > OSDK_LEGMOTORSPtr;
typedef boost::shared_ptr< ::diablo_sdk::OSDK_LEGMOTORS const> OSDK_LEGMOTORSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator2> & rhs)
{
  return lhs.left_hip_enc_rev == rhs.left_hip_enc_rev &&
    lhs.left_hip_pos == rhs.left_hip_pos &&
    lhs.left_hip_vel == rhs.left_hip_vel &&
    lhs.left_hip_iq == rhs.left_hip_iq &&
    lhs.left_knee_enc_rev == rhs.left_knee_enc_rev &&
    lhs.left_knee_pos == rhs.left_knee_pos &&
    lhs.left_knee_vel == rhs.left_knee_vel &&
    lhs.left_knee_iq == rhs.left_knee_iq &&
    lhs.left_wheel_enc_rev == rhs.left_wheel_enc_rev &&
    lhs.left_wheel_pos == rhs.left_wheel_pos &&
    lhs.left_wheel_vel == rhs.left_wheel_vel &&
    lhs.left_wheel_iq == rhs.left_wheel_iq &&
    lhs.right_hip_enc_rev == rhs.right_hip_enc_rev &&
    lhs.right_hip_pos == rhs.right_hip_pos &&
    lhs.right_hip_vel == rhs.right_hip_vel &&
    lhs.right_hip_iq == rhs.right_hip_iq &&
    lhs.right_knee_enc_rev == rhs.right_knee_enc_rev &&
    lhs.right_knee_pos == rhs.right_knee_pos &&
    lhs.right_knee_vel == rhs.right_knee_vel &&
    lhs.right_knee_iq == rhs.right_knee_iq &&
    lhs.right_wheel_enc_rev == rhs.right_wheel_enc_rev &&
    lhs.right_wheel_pos == rhs.right_wheel_pos &&
    lhs.right_wheel_vel == rhs.right_wheel_vel &&
    lhs.right_wheel_iq == rhs.right_wheel_iq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diablo_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d964a0d5c0310c226095caad70b0341b";
  }

  static const char* value(const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd964a0d5c0310c22ULL;
  static const uint64_t static_value2 = 0x6095caad70b0341bULL;
};

template<class ContainerAllocator>
struct DataType< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diablo_sdk/OSDK_LEGMOTORS";
  }

  static const char* value(const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   left_hip_enc_rev\n"
"float64  left_hip_pos\n"
"float64  left_hip_vel\n"
"float64  left_hip_iq\n"
"\n"
"int32   left_knee_enc_rev\n"
"float64  left_knee_pos\n"
"float64  left_knee_vel\n"
"float64  left_knee_iq\n"
"\n"
"int32   left_wheel_enc_rev\n"
"float64  left_wheel_pos\n"
"float64  left_wheel_vel\n"
"float64  left_wheel_iq\n"
"\n"
"int32   right_hip_enc_rev\n"
"float64  right_hip_pos\n"
"float64  right_hip_vel\n"
"float64  right_hip_iq\n"
"\n"
"int32   right_knee_enc_rev\n"
"float64  right_knee_pos\n"
"float64  right_knee_vel\n"
"float64  right_knee_iq\n"
"\n"
"int32   right_wheel_enc_rev\n"
"float64  right_wheel_pos\n"
"float64  right_wheel_vel\n"
"float64  right_wheel_iq\n"
;
  }

  static const char* value(const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_hip_enc_rev);
      stream.next(m.left_hip_pos);
      stream.next(m.left_hip_vel);
      stream.next(m.left_hip_iq);
      stream.next(m.left_knee_enc_rev);
      stream.next(m.left_knee_pos);
      stream.next(m.left_knee_vel);
      stream.next(m.left_knee_iq);
      stream.next(m.left_wheel_enc_rev);
      stream.next(m.left_wheel_pos);
      stream.next(m.left_wheel_vel);
      stream.next(m.left_wheel_iq);
      stream.next(m.right_hip_enc_rev);
      stream.next(m.right_hip_pos);
      stream.next(m.right_hip_vel);
      stream.next(m.right_hip_iq);
      stream.next(m.right_knee_enc_rev);
      stream.next(m.right_knee_pos);
      stream.next(m.right_knee_vel);
      stream.next(m.right_knee_iq);
      stream.next(m.right_wheel_enc_rev);
      stream.next(m.right_wheel_pos);
      stream.next(m.right_wheel_vel);
      stream.next(m.right_wheel_iq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OSDK_LEGMOTORS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diablo_sdk::OSDK_LEGMOTORS_<ContainerAllocator>& v)
  {
    s << indent << "left_hip_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_hip_enc_rev);
    s << indent << "left_hip_pos: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_pos);
    s << indent << "left_hip_vel: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_vel);
    s << indent << "left_hip_iq: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip_iq);
    s << indent << "left_knee_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_knee_enc_rev);
    s << indent << "left_knee_pos: ";
    Printer<double>::stream(s, indent + "  ", v.left_knee_pos);
    s << indent << "left_knee_vel: ";
    Printer<double>::stream(s, indent + "  ", v.left_knee_vel);
    s << indent << "left_knee_iq: ";
    Printer<double>::stream(s, indent + "  ", v.left_knee_iq);
    s << indent << "left_wheel_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_wheel_enc_rev);
    s << indent << "left_wheel_pos: ";
    Printer<double>::stream(s, indent + "  ", v.left_wheel_pos);
    s << indent << "left_wheel_vel: ";
    Printer<double>::stream(s, indent + "  ", v.left_wheel_vel);
    s << indent << "left_wheel_iq: ";
    Printer<double>::stream(s, indent + "  ", v.left_wheel_iq);
    s << indent << "right_hip_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_hip_enc_rev);
    s << indent << "right_hip_pos: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_pos);
    s << indent << "right_hip_vel: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_vel);
    s << indent << "right_hip_iq: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip_iq);
    s << indent << "right_knee_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_knee_enc_rev);
    s << indent << "right_knee_pos: ";
    Printer<double>::stream(s, indent + "  ", v.right_knee_pos);
    s << indent << "right_knee_vel: ";
    Printer<double>::stream(s, indent + "  ", v.right_knee_vel);
    s << indent << "right_knee_iq: ";
    Printer<double>::stream(s, indent + "  ", v.right_knee_iq);
    s << indent << "right_wheel_enc_rev: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_wheel_enc_rev);
    s << indent << "right_wheel_pos: ";
    Printer<double>::stream(s, indent + "  ", v.right_wheel_pos);
    s << indent << "right_wheel_vel: ";
    Printer<double>::stream(s, indent + "  ", v.right_wheel_vel);
    s << indent << "right_wheel_iq: ";
    Printer<double>::stream(s, indent + "  ", v.right_wheel_iq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIABLO_SDK_MESSAGE_OSDK_LEGMOTORS_H
