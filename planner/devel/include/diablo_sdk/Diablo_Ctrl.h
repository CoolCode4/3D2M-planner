// Generated by gencpp from file diablo_sdk/Diablo_Ctrl.msg
// DO NOT EDIT!


#ifndef DIABLO_SDK_MESSAGE_DIABLO_CTRL_H
#define DIABLO_SDK_MESSAGE_DIABLO_CTRL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diablo_sdk
{
template <class ContainerAllocator>
struct Diablo_Ctrl_
{
  typedef Diablo_Ctrl_<ContainerAllocator> Type;

  Diablo_Ctrl_()
    : speed(0.0)
    , omega(0.0)
    , height(0.0)
    , height_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , pitch_vel(0.0)  {
    }
  Diablo_Ctrl_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , omega(0.0)
    , height(0.0)
    , height_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , pitch_vel(0.0)  {
  (void)_alloc;
    }



   typedef double _speed_type;
  _speed_type speed;

   typedef double _omega_type;
  _omega_type omega;

   typedef double _height_type;
  _height_type height;

   typedef double _height_vel_type;
  _height_vel_type height_vel;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _pitch_vel_type;
  _pitch_vel_type pitch_vel;





  typedef boost::shared_ptr< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct Diablo_Ctrl_

typedef ::diablo_sdk::Diablo_Ctrl_<std::allocator<void> > Diablo_Ctrl;

typedef boost::shared_ptr< ::diablo_sdk::Diablo_Ctrl > Diablo_CtrlPtr;
typedef boost::shared_ptr< ::diablo_sdk::Diablo_Ctrl const> Diablo_CtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator1> & lhs, const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.omega == rhs.omega &&
    lhs.height == rhs.height &&
    lhs.height_vel == rhs.height_vel &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.pitch_vel == rhs.pitch_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator1> & lhs, const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diablo_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e2cd4c5870ee98d818034c30937e4c1";
  }

  static const char* value(const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e2cd4c5870ee98dULL;
  static const uint64_t static_value2 = 0x818034c30937e4c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diablo_sdk/Diablo_Ctrl";
  }

  static const char* value(const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 speed\n"
"float64 omega\n"
"\n"
"float64 height\n"
"float64 height_vel\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 pitch_vel\n"
;
  }

  static const char* value(const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.omega);
      stream.next(m.height);
      stream.next(m.height_vel);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.pitch_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diablo_Ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diablo_sdk::Diablo_Ctrl_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "omega: ";
    Printer<double>::stream(s, indent + "  ", v.omega);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "height_vel: ";
    Printer<double>::stream(s, indent + "  ", v.height_vel);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "pitch_vel: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIABLO_SDK_MESSAGE_DIABLO_CTRL_H
