// Generated by gencpp from file diablo_sdk/OSDK_POWER.msg
// DO NOT EDIT!


#ifndef DIABLO_SDK_MESSAGE_OSDK_POWER_H
#define DIABLO_SDK_MESSAGE_OSDK_POWER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diablo_sdk
{
template <class ContainerAllocator>
struct OSDK_POWER_
{
  typedef OSDK_POWER_<ContainerAllocator> Type;

  OSDK_POWER_()
    : battery_voltage(0.0)
    , battery_current(0.0)
    , battery_capacitor_energy(0.0)
    , battery_power_percent(0)  {
    }
  OSDK_POWER_(const ContainerAllocator& _alloc)
    : battery_voltage(0.0)
    , battery_current(0.0)
    , battery_capacitor_energy(0.0)
    , battery_power_percent(0)  {
  (void)_alloc;
    }



   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef float _battery_current_type;
  _battery_current_type battery_current;

   typedef float _battery_capacitor_energy_type;
  _battery_capacitor_energy_type battery_capacitor_energy;

   typedef uint8_t _battery_power_percent_type;
  _battery_power_percent_type battery_power_percent;





  typedef boost::shared_ptr< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> const> ConstPtr;

}; // struct OSDK_POWER_

typedef ::diablo_sdk::OSDK_POWER_<std::allocator<void> > OSDK_POWER;

typedef boost::shared_ptr< ::diablo_sdk::OSDK_POWER > OSDK_POWERPtr;
typedef boost::shared_ptr< ::diablo_sdk::OSDK_POWER const> OSDK_POWERConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diablo_sdk::OSDK_POWER_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diablo_sdk::OSDK_POWER_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_POWER_<ContainerAllocator2> & rhs)
{
  return lhs.battery_voltage == rhs.battery_voltage &&
    lhs.battery_current == rhs.battery_current &&
    lhs.battery_capacitor_energy == rhs.battery_capacitor_energy &&
    lhs.battery_power_percent == rhs.battery_power_percent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diablo_sdk::OSDK_POWER_<ContainerAllocator1> & lhs, const ::diablo_sdk::OSDK_POWER_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diablo_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af7f088b6f4d460cd98e99b224891f70";
  }

  static const char* value(const ::diablo_sdk::OSDK_POWER_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf7f088b6f4d460cULL;
  static const uint64_t static_value2 = 0xd98e99b224891f70ULL;
};

template<class ContainerAllocator>
struct DataType< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diablo_sdk/OSDK_POWER";
  }

  static const char* value(const ::diablo_sdk::OSDK_POWER_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32     battery_voltage\n"
"float32     battery_current\n"
"float32     battery_capacitor_energy\n"
"uint8       battery_power_percent\n"
;
  }

  static const char* value(const ::diablo_sdk::OSDK_POWER_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_voltage);
      stream.next(m.battery_current);
      stream.next(m.battery_capacitor_energy);
      stream.next(m.battery_power_percent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OSDK_POWER_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diablo_sdk::OSDK_POWER_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diablo_sdk::OSDK_POWER_<ContainerAllocator>& v)
  {
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_current: ";
    Printer<float>::stream(s, indent + "  ", v.battery_current);
    s << indent << "battery_capacitor_energy: ";
    Printer<float>::stream(s, indent + "  ", v.battery_capacitor_energy);
    s << indent << "battery_power_percent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_power_percent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIABLO_SDK_MESSAGE_OSDK_POWER_H
